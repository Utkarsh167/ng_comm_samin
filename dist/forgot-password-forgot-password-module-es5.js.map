{"version":3,"sources":["src/app/modules/account/forgot-password/component/forgot-password.component.html","src/app/constant/error.ts","src/app/modules/account/forgot-password/component/forgot-password.component.scss","src/app/modules/account/forgot-password/component/forgot-password.component.ts","src/app/modules/account/forgot-password/forgot-password.module.ts","src/app/modules/account/forgot-password/service/forgot-password.service.ts","src/app/pipes/validation-error/validation-error.pipe.module.ts","src/app/pipes/validation-error/validation-error.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<h1 class=\\\"form_heading\\\">Forgot Password</h1>\\n<p class=\\\"form-para\\\">\\n  {{title}}\\n</p>\\n<form [formGroup]=\\\"forgotForm\\\" (ngSubmit)=\\\"validateEmail()\\\">\\n  <div class=\\\"form_filed_wrapper\\\">\\n    <mat-form-field appearance=\\\"outline\\\">\\n      <mat-label>Enter Email Id</mat-label>\\n      <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\n      <mat-error>\\n        {{getControl('email')|validate:'email'}}\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n\\n  <div class=\\\"form_filed_wrapper text-right\\\">\\n    <a class=\\\"forgot\\\" [routerLink]=\\\"'LOGIN'|absolutePath\\\">Back</a>\\n  </div>\\n  <div class=\\\"form_filed_wrapper text-center\\\">\\n    <button mat-raised-button color=\\\"primary\\\">Submit</button>\\n  </div>\\n</form>\"","import { toTitleCase } from \"./message\";\nimport { PATTERN } from \"./patterns\";\n\nexport const PATTERN_ERRORS = (pattern, key) => {\n    if (pattern == PATTERN.email) {\n        return `Please enter a valid ${key.toLowerCase()}`\n    }\n    if (pattern == PATTERN.password) {\n        return `${toTitleCase(key)} can not contain blank spaces`\n    }\n    if (pattern == PATTERN.name) {\n        return `${toTitleCase(key)} can not be blank`\n    }\n    if (pattern == PATTERN.phone) {\n        return `${toTitleCase(key)} must contain only numbers and can not start with 0`\n    }\n    if (pattern == PATTERN.price) {\n        return `${toTitleCase(key)} must contain only numbers and can not start with 0`\n    }\n    if (pattern == PATTERN.alphaNumeric) {\n        return `${toTitleCase(key)} can contain only characters and numbers`\n    }\n    if (pattern == PATTERN.numeric) {\n        return `${toTitleCase(key)} can contain only numbers`\n    }\n    if (pattern == PATTERN.alphabetsWithSpace) {\n        return `${toTitleCase(key)} can contain only characters and space`\n    }\n}","export default \".form-para {\\n  font-size: 18px;\\n  line-height: 1.8;\\n  margin-bottom: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RyYW5zbGFiZGV2Mi9EZXYvYW5ndWxhci9jb21tX2ZlX3NhZG1pbi9zcmMvYXBwL21vZHVsZXMvYWNjb3VudC9mb3Jnb3QtcGFzc3dvcmQvY29tcG9uZW50L2ZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvbW9kdWxlcy9hY2NvdW50L2ZvcmdvdC1wYXNzd29yZC9jb21wb25lbnQvZm9yZ290LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZUFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNjb3VudC9mb3Jnb3QtcGFzc3dvcmQvY29tcG9uZW50L2ZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLXBhcmEge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMS44O1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG59IiwiLmZvcm0tcGFyYSB7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbGluZS1oZWlnaHQ6IDEuODtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ForgotPasswordService } from '../service/forgot-password.service';\nimport { POPUP_MESSAGES } from 'src/app/constant/message';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotForm: FormGroup;\n  showSpinner = false;\n  title = POPUP_MESSAGES.forgotPasswordTitle;\n\n  constructor(\n    private _forgotPasswordService: ForgotPasswordService\n  ) {\n    this.createForgotPasswordForm();\n  }\n\n  ngOnInit() {\n  }\n  /* \n      Method For Creating Forgot Password Form\n  */\n  createForgotPasswordForm() {\n    this.forgotForm = this._forgotPasswordService.createForgotForm();\n  }\n\n  getControl(control) {\n    return this.forgotForm.controls[control];\n  }\n\n  /*  \n       Method For Calling Validating Email\n  */\n  validateEmail() {\n    if (this.forgotForm.invalid)\n      return;\n    const data = { ...this.forgotForm.value };\n    this.forgotForm.disable();\n    this._forgotPasswordService.validateEmail(data)\n      .subscribe(\n        response => {\n        },\n        err => {\n          this.forgotForm.enable();\n        }\n      )\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ForgotPasswordComponent } from './component/forgot-password.component';\nimport { AccountGuard } from '../../../guards/account.guard';\nimport {\n  MatButtonModule,\n  MatInputModule,\n  MatFormFieldModule\n} from '@angular/material';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ForgotPasswordService } from './service/forgot-password.service';\nimport { ValidationErrorPipeModule } from 'src/app/pipes/validation-error/validation-error.pipe.module';\n\nconst routes: Routes = [\n  { path: '', component: ForgotPasswordComponent, canActivate: [AccountGuard] }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    ValidationErrorPipeModule\n  ],\n  declarations: [ForgotPasswordComponent],\n  providers: [ForgotPasswordService]\n})\nexport class ForgotPasswordModule { }\n","import { Injectable } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { HttpService } from '../../../shared/services/http.service';\nimport { POPUP_MESSAGES } from 'src/app/constant/message';\nimport { FormService } from '../../../shared/services/form.service';\nimport { UtilityService } from '../../../shared/services/utility.service';\nimport { Router } from '@angular/router';\nimport { LOGIN } from '../../../../constant/absolute-routes';\nimport { FORGOT_PASSWORD } from 'src/app/constant/url';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable()\nexport class ForgotPasswordService {\n\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _http: HttpService,\n        private _utilityService: UtilityService,\n        private _router: Router,\n        private _formService: FormService\n    ) { }\n\n    /* \n         Method For Creating Forgot Password Form\n     */\n    createForgotForm() {\n        return this._formBuilder.group(\n            {\n                email: this._formService.getControl('email')\n            }\n        )\n    }\n    /* \n       Method For Validating Forgot Password Email\n   */\n    validateEmail(data) {\n        data = this._utilityService.trim(data);\n        return this._http.post(FORGOT_PASSWORD, data).pipe(\n            map(\n                response => {\n                    this.emailValidationSuccess();\n                    return response;\n                }\n            ),\n            catchError(\n                error => throwError(error)\n            )\n        )\n    }\n\n    /* \n       Method For Showing popup of successfully verifying and sending reset password link\n   */\n    emailValidationSuccess() {\n        let data = {\n            title: POPUP_MESSAGES.passwordResetTitle,\n            message: POPUP_MESSAGES.passwordResetLink,\n            yes: POPUP_MESSAGES.close,\n            hideCancelButton: true\n        }\n        this._utilityService.openDialog(data).subscribe(success => {\n            this._router.navigate([LOGIN]);\n        });\n    }\n}\n","import { ValidationErrorPipe } from './validation-error.pipe';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ], \n  declarations: [\n    ValidationErrorPipe,\n  ],\n  exports: [\n    ValidationErrorPipe,\n  ],\n  providers:[]\n})\nexport class ValidationErrorPipeModule { }\n","import { FormControl } from '@angular/forms';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { PATTERN_ERRORS } from '../../constant/error';\nimport { VALIDATION_MESSAGES, toTitleCase } from 'src/app/constant/message';\n@Pipe({\n  name: 'validate',\n  pure: false\n})\nexport class ValidationErrorPipe implements PipeTransform {\n  constructor() {\n  }\n  transform(control: FormControl, name: string): any {\n    return control && control.errors ? this.getValidationError(control, name) : ''\n  }\n  getValidationError(control: FormControl, name) {\n    if (control.hasError('required')) {\n      return `${toTitleCase(name)} is required`;\n    }\n    if (control.hasError('pattern')) {\n      let pattern = control.errors.pattern.requiredPattern;\n      return PATTERN_ERRORS(pattern, name);\n    }\n    if (control.hasError('minlength')) {\n      return `${toTitleCase(name)} must be at least ${control.errors.minlength.requiredLength} characters long`;\n    }\n    if (control.hasError('maxlength')) {\n      return `${toTitleCase(name)} can not be more than ${control.errors.maxlength.requiredLength} characters long`;\n    }\n    if (control.hasError('matchPassword')) {\n      return VALIDATION_MESSAGES[name]['matchPassword'] || '';\n    }\n    if (control.hasError('min')) {\n      return `${toTitleCase(name)} can not be less than ${control.errors.min.min}`;\n    }\n    if (control.hasError('max')) {\n      return `${toTitleCase(name)} can not be greater than ${control.errors.max.max}`;\n    }\n    if (control.hasError('url')) {\n      return ` Please enter correct ${toTitleCase(name)}`;\n    }\n\n    \n  }\n}"],"sourceRoot":"webpack:///","file":"forgot-password-forgot-password-module-es5.js"}