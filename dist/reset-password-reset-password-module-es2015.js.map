{"version":3,"sources":["./src/app/modules/account/reset-password/component/reset-password.component.html","./src/app/constant/error.ts","./src/app/modules/account/reset-password/component/reset-password.component.scss","./src/app/modules/account/reset-password/component/reset-password.component.ts","./src/app/modules/account/reset-password/reset-password.module.ts","./src/app/modules/account/reset-password/service/reset-password.service.ts","./src/app/pipes/validation-error/validation-error.pipe.module.ts","./src/app/pipes/validation-error/validation-error.pipe.ts"],"names":[],"mappings":"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","file":"reset-password-reset-password-module-es2015.js","sourcesContent":["export default \"<h1 class=\\\"form_heading\\\">Reset Password</h1>\\n<form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"resetPassword()\\\">\\n  <div class=\\\"form_filed_wrapper\\\">\\n    <mat-form-field appearance=\\\"outline\\\">\\n      <mat-label>Enter New Password</mat-label>\\n      <input matInput required [type]=\\\"passwordHide ? 'password'  :  'text'\\\" formControlName=\\\"password\\\">\\n      <mat-icon matSuffix (click)=\\\"passwordHide= !passwordHide\\\">\\n        {{passwordHide ? 'visibility_off' : 'visibility'}}\\n      </mat-icon>\\n      <mat-error>\\n        {{getControl('password')|validate:'password'}}\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n\\n  <div class=\\\"form_filed_wrapper\\\">\\n    <mat-form-field appearance=\\\"outline\\\">\\n      <mat-label>Enter Confirm Password</mat-label>\\n      <input matInput required [type]=\\\"confirmPasswordHide ? 'password' :'text'\\\" formControlName=\\\"confirmPassword\\\">\\n      <mat-icon matSuffix (click)=\\\"confirmPasswordHide= !confirmPasswordHide\\\">\\n        {{confirmPasswordHide ?'visibility_off' : 'visibility'}}\\n      </mat-icon>\\n      <mat-error>\\n        {{getControl('confirmPassword')|validate:'confirm password'}}\\n      </mat-error>\\n    </mat-form-field>\\n  </div>\\n\\n\\n  <div class=\\\"form_filed_wrapper text-center\\\">\\n    <button mat-raised-button color=\\\"primary\\\">Submit</button>\\n  </div>\\n</form>\"","import { toTitleCase } from \"./message\";\nimport { PATTERN } from \"./patterns\";\n\nexport const PATTERN_ERRORS = (pattern, key) => {\n    if (pattern == PATTERN.email) {\n        return `Please enter a valid ${key.toLowerCase()}`\n    }\n    if (pattern == PATTERN.password) {\n        return `${toTitleCase(key)} can not contain blank spaces`\n    }\n    if (pattern == PATTERN.name) {\n        return `${toTitleCase(key)} can not be blank`\n    }\n    if (pattern == PATTERN.phone) {\n        return `${toTitleCase(key)} must contain only numbers and can not start with 0`\n    }\n    if (pattern == PATTERN.price) {\n        return `${toTitleCase(key)} must contain only numbers and can not start with 0`\n    }\n    if (pattern == PATTERN.alphaNumeric) {\n        return `${toTitleCase(key)} can contain only characters and numbers`\n    }\n    if (pattern == PATTERN.numeric) {\n        return `${toTitleCase(key)} can contain only numbers`\n    }\n    if (pattern == PATTERN.alphabetsWithSpace) {\n        return `${toTitleCase(key)} can contain only characters and space`\n    }\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYWNjb3VudC9yZXNldC1wYXNzd29yZC9jb21wb25lbnQvcmVzZXQtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ResetPasswordService } from '../service/reset-password.service';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  passwordHide = true;\n  confirmPasswordHide = true;\n  token: String;\n  resetForm: FormGroup;\n\n  constructor(\n    private _accountService: ResetPasswordService,\n    private _route: ActivatedRoute\n  ) {\n    this.resetForm = this._accountService.createResetPasswordForm();\n    this.token = this._route.snapshot.params.token;\n  }\n\n  ngOnInit() {\n\n  }\n\n  getControl(control) {\n    return this.resetForm.controls[control];\n  }\n\n  resetPassword() {\n    if (this.resetForm.invalid||this.resetForm.disabled)\n      return;\n    let data = { ...this.resetForm.value };\n    this.resetForm.disable();\n    data['token'] = this.token;\n    this._accountService.resetPassword(data)\n      .subscribe(\n        response => {\n        },\n        err => {\n          this.resetForm.enable();\n        }\n      )\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ResetPasswordComponent } from './component/reset-password.component';\nimport {\n  MatButtonModule,\n  MatInputModule,\n  MatFormFieldModule,\n  MatIconModule\n} from '@angular/material';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ValidationErrorPipeModule } from 'src/app/pipes/validation-error/validation-error.pipe.module';\nimport { ResetPasswordService } from './service/reset-password.service';\n\nconst routes: Routes = [\n  { path: '', component: ResetPasswordComponent }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    ValidationErrorPipeModule\n  ],\n  declarations: [ResetPasswordComponent],\n  providers: [ResetPasswordService]\n})\nexport class ResetPasswordModule { }\n","import { Injectable } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { HttpService } from '../../../shared/services/http.service';\nimport { POPUP_MESSAGES } from 'src/app/constant/message';\nimport { UtilityService } from '../../../shared/services/utility.service';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\nimport { LOGIN } from '../../../../constant/absolute-routes';\nimport { FormService } from 'src/app/modules/shared/services/form.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { RESET_PASSWORD } from '../../../../constant/url';\nimport { LINK_EXPIRED } from 'src/app/constant/routes';\n\n@Injectable()\nexport class ResetPasswordService {\n\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _http: HttpService,\n        private _utilityService: UtilityService,\n        private _router: Router,\n        private _formService: FormService\n    ) { }\n\n    /* \n        Method For Creating Registration Form\n    */\n    createResetPasswordForm() {\n        return this._formBuilder.group(\n            {\n                password: this._formService.getControl('password'),\n                confirmPassword: this._formService.getControl('password')\n            },\n            {\n                validator: this._formService.matchPassword\n            }\n        ) \n    }\n\n    /* \n        Method For Resetting The Password\n    */\n    resetPassword(data) {\n        data = this._utilityService.trim(data);\n        return this._http.post(`${RESET_PASSWORD}?accessToken=${data.token}`, { password: data.password }).pipe(\n            map(\n                response => {\n                    this.resetPasswordSuccess();\n                    return response;\n                }\n            ),\n            catchError(\n                error => {\n                    if (error.error.statusCode === 400 && error.error.responseType === 'INVALID_TOKEN') {\n                        this._router.navigate([`/${LINK_EXPIRED}`]);\n                    }\n                    return throwError(error);\n                }\n            )\n        )\n    }\n\n    /* \n       Method For Showing Reset Password Success\n   */\n    resetPasswordSuccess() {\n        let data = {\n            title: POPUP_MESSAGES.passwordResetTitle,\n            message: POPUP_MESSAGES.passwordChanged,\n            yes: POPUP_MESSAGES.close,\n            hideCancelButton: true\n        }\n        this._utilityService.openDialog(data).subscribe(success => {\n            if (this._router.url.startsWith('/account'))\n            this._router.navigate([LOGIN]);\n        });\n    }\n}\n","import { ValidationErrorPipe } from './validation-error.pipe';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ], \n  declarations: [\n    ValidationErrorPipe,\n  ],\n  exports: [\n    ValidationErrorPipe,\n  ],\n  providers:[]\n})\nexport class ValidationErrorPipeModule { }\n","import { FormControl } from '@angular/forms';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { PATTERN_ERRORS } from '../../constant/error';\nimport { VALIDATION_MESSAGES, toTitleCase } from 'src/app/constant/message';\n@Pipe({\n  name: 'validate',\n  pure: false\n})\nexport class ValidationErrorPipe implements PipeTransform {\n  constructor() {\n  }\n  transform(control: FormControl, name: string): any {\n    return control && control.errors ? this.getValidationError(control, name) : ''\n  }\n  getValidationError(control: FormControl, name) {\n    if (control.hasError('required')) {\n      return `${toTitleCase(name)} is required`;\n    }\n    if (control.hasError('pattern')) {\n      let pattern = control.errors.pattern.requiredPattern;\n      return PATTERN_ERRORS(pattern, name);\n    }\n    if (control.hasError('minlength')) {\n      return `${toTitleCase(name)} must be at least ${control.errors.minlength.requiredLength} characters long`;\n    }\n    if (control.hasError('maxlength')) {\n      return `${toTitleCase(name)} can not be more than ${control.errors.maxlength.requiredLength} characters long`;\n    }\n    if (control.hasError('matchPassword')) {\n      return VALIDATION_MESSAGES[name]['matchPassword'] || '';\n    }\n    if (control.hasError('min')) {\n      return `${toTitleCase(name)} can not be less than ${control.errors.min.min}`;\n    }\n    if (control.hasError('max')) {\n      return `${toTitleCase(name)} can not be greater than ${control.errors.max.max}`;\n    }\n    if (control.hasError('url')) {\n      return ` Please enter correct ${toTitleCase(name)}`;\n    }\n\n    \n  }\n}"],"sourceRoot":"webpack:///"}